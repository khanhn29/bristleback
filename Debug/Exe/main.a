;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 9/28/2020
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega128
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*******************************************************/
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "main.h"
;#include <string.h>
;#include <delay.h>
;
;// Declare your global variables here
;enum alert_mode_e    g_alert_led_mode;
;
;#define DATA_REGISTER_EMPTY (1<<UDRE0)
;#define RX_COMPLETE (1<<RXC0)
;#define FRAMING_ERROR (1<<FE0)
;#define PARITY_ERROR (1<<UPE0)
;#define DATA_OVERRUN (1<<DOR0)
;
;// USART0 Receiver buffer
;#define RX_BUFFER_SIZE0 8
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0 <= 256
;unsigned char rx_wr_index0=0,rx_rd_index0=0;
;#else
;unsigned int rx_wr_index0=0,rx_rd_index0=0;
;#endif
;
;#if RX_BUFFER_SIZE0 < 256
;unsigned char rx_counter0=0;
;#else
;unsigned int rx_counter0=0;
;#endif
;
;// This flag is set on USART0 Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void)
; 0000 003B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 003C char status,data;
; 0000 003D status=UCSR0A;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 003E data=UDR0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 003F if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0040    {
; 0000 0041    rx_buffer0[rx_wr_index0++]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0042 #if RX_BUFFER_SIZE0 == 256
; 0000 0043    // special case for receiver buffer size=256
; 0000 0044    if (++rx_counter0 == 0) rx_buffer_overflow0=1;
; 0000 0045 #else
; 0000 0046    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0047    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0048       {
; 0000 0049       rx_counter0=0;
;PCODE: $00000026 VOL: 0
; 0000 004A       rx_buffer_overflow0=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 004B       }
; 0000 004C #endif
; 0000 004D    }
;PCODE: $0000002A VOL: 0
; 0000 004E }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART0 Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0055 {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0056 char data;
; 0000 0057 while (rx_counter0==0);
;PCODE: $00000032 VOL: 0
;	data -> R17
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0058 data=rx_buffer0[rx_rd_index0++];
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0059 #if RX_BUFFER_SIZE0 != 256
; 0000 005A if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 005B #endif
; 0000 005C #asm("cli")
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
	cli
;PCODE: $00000043 VOL: 0
; 0000 005D --rx_counter0;
;PCODE: $00000044 VOL: 0
; 0000 005E #asm("sei")
;PCODE: $00000045 VOL: 0
	sei
;PCODE: $00000046 VOL: 0
; 0000 005F return data;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0060 }
;PCODE: $0000004A VOL: 0
;#pragma used-
;#endif
;
;// USART0 Transmitter buffer
;#define TX_BUFFER_SIZE0 8
;char tx_buffer0[TX_BUFFER_SIZE0];
;
;#if TX_BUFFER_SIZE0 <= 256
;unsigned char tx_wr_index0=0,tx_rd_index0=0;
;#else
;unsigned int tx_wr_index0=0,tx_rd_index0=0;
;#endif
;
;#if TX_BUFFER_SIZE0 < 256
;unsigned char tx_counter0=0;
;#else
;unsigned int tx_counter0=0;
;#endif
;
;// USART0 Transmitter interrupt service routine
;interrupt [USART0_TXC] void usart0_tx_isr(void)
; 0000 0076 {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0077 if (tx_counter0)
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0078    {
; 0000 0079    --tx_counter0;
;PCODE: $0000004F VOL: 0
; 0000 007A    UDR0=tx_buffer0[tx_rd_index0++];
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 007B #if TX_BUFFER_SIZE0 != 256
; 0000 007C    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 007D #endif
; 0000 007E    }
;PCODE: $0000005A VOL: 0
; 0000 007F }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART0 Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 0086 {
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0087 while (tx_counter0 == TX_BUFFER_SIZE0);
;PCODE: $00000061 VOL: 0
;	c -> Y+0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0088 #asm("cli")
;PCODE: $00000068 VOL: 0
	cli
;PCODE: $00000069 VOL: 0
; 0000 0089 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 008A    {
; 0000 008B    tx_buffer0[tx_wr_index0++]=c;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 008C #if TX_BUFFER_SIZE0 != 256
; 0000 008D    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 008E #endif
; 0000 008F    ++tx_counter0;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0090    }
; 0000 0091 else
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0092    UDR0=c;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0093 #asm("sei")
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
	sei
;PCODE: $00000083 VOL: 0
; 0000 0094 }
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 00A0 {
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00A1 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $00000089 VOL: 0
;	adc_input -> Y+0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00A2 // Delay needed for the stabilization of the ADC input voltage
; 0000 00A3 delay_us(10);
;PCODE: $0000008D VOL: 0
; 0000 00A4 // Start the AD conversion
; 0000 00A5 ADCSRA|=(1<<ADSC);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00A6 // Wait for the AD conversion to complete
; 0000 00A7 while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00A8 ADCSRA|=(1<<ADIF);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00A9 return ADCW;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00AA }
;PCODE: $0000009B VOL: 0
;
;void main(void)
; 0000 00AD {
;PCODE: $0000009C VOL: 0
; 0000 00AE // Declare your local variables here
; 0000 00AF 
; 0000 00B0 // Input/Output Ports initialization
; 0000 00B1 // Port A initialization
; 0000 00B2 // Function: Bit7=Out Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00B3 DDRA=(1<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00B4 // State: Bit7=0 Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00B5 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00B6 
; 0000 00B7 // Port B initialization
; 0000 00B8 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00B9 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00BA // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00BB PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00BC 
; 0000 00BD // Port C initialization
; 0000 00BE // Function: Bit7=Out Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=In Bit1=Out Bit0=Out
; 0000 00BF DDRC=(1<<DDC7) | (0<<DDC6) | (1<<DDC5) | (0<<DDC4) | (1<<DDC3) | (0<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00C0 // State: Bit7=0 Bit6=T Bit5=0 Bit4=T Bit3=0 Bit2=T Bit1=0 Bit0=0
; 0000 00C1 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00C2 
; 0000 00C3 // Port D initialization
; 0000 00C4 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00C5 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00C6 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00C7 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00C8 
; 0000 00C9 // Port E initialization
; 0000 00CA // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00CB DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (0<<DDE3) | (0<<DDE2) | (0<<DDE1) | (0<<DDE0);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00CC // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00CD PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00CE 
; 0000 00CF // Port F initialization
; 0000 00D0 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00D1 DDRF=(0<<DDF7) | (0<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF3) | (0<<DDF2) | (0<<DDF1) | (0<<DDF0);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00D2 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00D3 PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00D4 
; 0000 00D5 // Port G initialization
; 0000 00D6 // Function: Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00D7 DDRG=(0<<DDG4) | (0<<DDG3) | (0<<DDG2) | (0<<DDG1) | (0<<DDG0);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00D8 // State: Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00D9 PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00DA 
; 0000 00DB // Timer/Counter 0 initialization
; 0000 00DC // Clock source: System Clock
; 0000 00DD // Clock value: Timer 0 Stopped
; 0000 00DE // Mode: Normal top=0xFF
; 0000 00DF // OC0 output: Disconnected
; 0000 00E0 ASSR=0<<AS0;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00E1 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00E2 TCNT0=0x00;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00E3 OCR0=0x00;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00E4 
; 0000 00E5 // Timer/Counter 1 initialization
; 0000 00E6 // Clock source: System Clock
; 0000 00E7 // Clock value: Timer1 Stopped
; 0000 00E8 // Mode: Normal top=0xFFFF
; 0000 00E9 // OC1A output: Disconnected
; 0000 00EA // OC1B output: Disconnected
; 0000 00EB // OC1C output: Disconnected
; 0000 00EC // Noise Canceler: Off
; 0000 00ED // Input Capture on Falling Edge
; 0000 00EE // Timer1 Overflow Interrupt: Off
; 0000 00EF // Input Capture Interrupt: Off
; 0000 00F0 // Compare A Match Interrupt: Off
; 0000 00F1 // Compare B Match Interrupt: Off
; 0000 00F2 // Compare C Match Interrupt: Off
; 0000 00F3 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00F4 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00F5 TCNT1H=0x00;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00F6 TCNT1L=0x00;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00F7 ICR1H=0x00;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00F8 ICR1L=0x00;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00F9 OCR1AH=0x00;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00FA OCR1AL=0x00;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00FB OCR1BH=0x00;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00FC OCR1BL=0x00;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00FD OCR1CH=0x00;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00FE OCR1CL=0x00;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00FF 
; 0000 0100 // Timer/Counter 2 initialization
; 0000 0101 // Clock source: System Clock
; 0000 0102 // Clock value: Timer2 Stopped
; 0000 0103 // Mode: Normal top=0xFF
; 0000 0104 // OC2 output: Disconnected
; 0000 0105 TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0106 TCNT2=0x00;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0107 OCR2=0x00;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0108 
; 0000 0109 // Timer/Counter 3 initialization
; 0000 010A // Clock source: System Clock
; 0000 010B // Clock value: Timer3 Stopped
; 0000 010C // Mode: Normal top=0xFFFF
; 0000 010D // OC3A output: Disconnected
; 0000 010E // OC3B output: Disconnected
; 0000 010F // OC3C output: Disconnected
; 0000 0110 // Noise Canceler: Off
; 0000 0111 // Input Capture on Falling Edge
; 0000 0112 // Timer3 Overflow Interrupt: Off
; 0000 0113 // Input Capture Interrupt: Off
; 0000 0114 // Compare A Match Interrupt: Off
; 0000 0115 // Compare B Match Interrupt: Off
; 0000 0116 // Compare C Match Interrupt: Off
; 0000 0117 TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0118 TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0119 TCNT3H=0x00;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 011A TCNT3L=0x00;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 011B ICR3H=0x00;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 011C ICR3L=0x00;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 011D OCR3AH=0x00;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 011E OCR3AL=0x00;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 011F OCR3BH=0x00;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0120 OCR3BL=0x00;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0121 OCR3CH=0x00;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0122 OCR3CL=0x00;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0123 
; 0000 0124 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0125 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0126 ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0127 
; 0000 0128 // External Interrupt(s) initialization
; 0000 0129 // INT0: Off
; 0000 012A // INT1: Off
; 0000 012B // INT2: Off
; 0000 012C // INT3: Off
; 0000 012D // INT4: Off
; 0000 012E // INT5: Off
; 0000 012F // INT6: Off
; 0000 0130 // INT7: Off
; 0000 0131 EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0132 EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 0133 EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0134 
; 0000 0135 // USART0 initialization
; 0000 0136 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0137 // USART0 Receiver: On
; 0000 0138 // USART0 Transmitter: On
; 0000 0139 // USART0 Mode: Asynchronous
; 0000 013A // USART0 Baud Rate: 9600
; 0000 013B UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 013C UCSR0B=(1<<RXCIE0) | (1<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 013D UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 013E UBRR0H=0x00;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 013F UBRR0L=0x33;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0140 
; 0000 0141 // USART1 initialization
; 0000 0142 // USART1 disabled
; 0000 0143 UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 0144 
; 0000 0145 // Analog Comparator initialization
; 0000 0146 // Analog Comparator: Off
; 0000 0147 // The Analog Comparator's positive input is
; 0000 0148 // connected to the AIN0 pin
; 0000 0149 // The Analog Comparator's negative input is
; 0000 014A // connected to the AIN1 pin
; 0000 014B ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 014C 
; 0000 014D // ADC initialization
; 0000 014E // ADC Clock frequency: 1000.000 kHz
; 0000 014F // ADC Voltage Reference: AREF pin
; 0000 0150 ADMUX=ADC_VREF_TYPE;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0151 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 0152 SFIOR=(0<<ACME);
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 0153 
; 0000 0154 // SPI initialization
; 0000 0155 // SPI disabled
; 0000 0156 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0157 
; 0000 0158 // TWI initialization
; 0000 0159 // TWI disabled
; 0000 015A TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 015B 
; 0000 015C // Global enable interrupts
; 0000 015D #asm("sei")
;PCODE: $00000119 VOL: 0
	sei
;PCODE: $0000011A VOL: 0
; 0000 015E 
; 0000 015F while (1)
;PCODE: $0000011B VOL: 0
; 0000 0160       {
; 0000 0161       // Place your code here
; 0000 0162 
; 0000 0163       }
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 0164 }
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
