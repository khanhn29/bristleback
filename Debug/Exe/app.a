;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <string.h>
;#include <stdio.h>
;#include <stdlib.h>
;#include <delay.h>
;#include <ctype.h>
;#include "main.h"
;
;unsigned int      g_count_adc_0;
;int               g_value_adc_0;
;
;unsigned int      g_count_adc_1;
;int               g_value_adc_1;
;static int        g_temperature_not_ready_value = 100;

	.DSEG
;
;unsigned int      g_led_control;
;int      g_connect_mode;
;char     g_uart_send_buf[MAX_RECIEVE_BUF];
;extern enum alert_mode_e    g_alert_led_mode;
;
;void get_status_led()
; 0001 0016 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0017    g_count_adc_1++;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0001 0018    if(g_count_adc_1 > 100)
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0001 0019    {
; 0001 001A       g_count_adc_1 = 0;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0001 001B       g_value_adc_1 = read_adc(1) * 500 / 1023;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0001 001C    }
; 0001 001D 
; 0001 001E    if(DOOR == IS_OPEN || INLET == IS_REMOVED)
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0001 001F    {
; 0001 0020       g_alert_led_mode = door_open_or_inlet_removed;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0001 0021       turnoff();
;PCODE: $0000002B VOL: 0
; 0001 0022    }
; 0001 0023    else if(NOZZLE == IS_BLOCKED)
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0001 0024    {
; 0001 0025       g_alert_led_mode = nozzle_blocked;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0001 0026       turnoff();
;PCODE: $00000033 VOL: 0
; 0001 0027    }
; 0001 0028    else if(g_value_adc_1 >= g_temperature_not_ready_value)
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0001 0029    {
; 0001 002A       g_alert_led_mode = in_temperature_not_ready_mode;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0001 002B       turnoff();
;PCODE: $0000003C VOL: 0
; 0001 002C    }
; 0001 002D    else
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0001 002E    {
; 0001 002F       g_alert_led_mode = no_fault;
;PCODE: $0000003F VOL: 0
; 0001 0030    }
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0001 0031 }
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;
;
;void send_string(unsigned char *u)
; 0001 0035 {
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0001 0036    unsigned char n,i;
; 0001 0037    n = strlen(u);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;	*u -> Y+2
;	n -> R17
;	i -> R16
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0001 0038    for(i = 0; i < n; i++)
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0001 0039    {
; 0001 003A       putchar(u[i]);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0001 003B    }
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0001 003C    putchar('\r');
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0001 003D    putchar('\n');
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0001 003E }
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;
;
;
;void perform_status_led()
; 0001 0043 {
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0001 0044    static enum alert_mode_e prev_status = no_fault;
; 0001 0045    g_led_control++;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0001 0046    if(g_led_control >= 10000)
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0001 0047       g_led_control = 0;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0001 0048 
; 0001 0049    switch(g_alert_led_mode)
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0001 004A    {
; 0001 004B       case no_fault:
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0001 004C       {
; 0001 004D          LED_GREEN = STATUS_ON;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0001 004E          LED_RED = STATUS_OFF;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0001 004F          break;
;PCODE: $0000007E VOL: 0
; 0001 0050       }
; 0001 0051       case nozzle_blocked:
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0001 0052       {
; 0001 0053          if(g_led_control % DELAY_DIV_NUM == 0)
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0001 0054          {
; 0001 0055             LED_GREEN = !LED_GREEN;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0001 0056             LED_RED = LED_GREEN;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0001 0057          }
; 0001 0058          break;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0001 0059       }
; 0001 005A       case in_maintenance_mode:
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0001 005B       {
; 0001 005C          if(g_led_control % DELAY_DIV_NUM == 0)
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0001 005D          {
; 0001 005E             LED_GREEN = !LED_GREEN;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0001 005F             LED_RED = !LED_GREEN;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0001 0060          }
; 0001 0061          break;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0001 0062       }
; 0001 0063       case in_temperature_not_ready_mode:
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0001 0064       {
; 0001 0065          if(g_led_control % DELAY_DIV_NUM == 0)
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0001 0066          {
; 0001 0067             LED_GREEN = !LED_GREEN;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0001 0068          }
; 0001 0069          LED_RED = STATUS_OFF;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0001 006A          break;
;PCODE: $000000D0 VOL: 0
; 0001 006B       }
; 0001 006C       case door_open_or_inlet_removed:
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0001 006D       {
; 0001 006E          if(g_led_control % DELAY_DIV_NUM == 0)
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0001 006F          {
; 0001 0070             LED_RED = !LED_RED;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0001 0071          }
; 0001 0072          LED_GREEN = STATUS_OFF;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0001 0073          break;
;PCODE: $000000E6 VOL: 0
; 0001 0074       }
; 0001 0075       case serial_link_to_siu_fault:
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0001 0076       {
; 0001 0077          if(g_led_control % DELAY_DIV_NUM == 0)
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0001 0078          {
; 0001 0079             LED_RED = !LED_RED;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0001 007A          }
; 0001 007B          LED_GREEN = STATUS_ON;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0001 007C          break;
;PCODE: $000000FC VOL: 0
; 0001 007D       }
; 0001 007E       case other_fault:
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0001 007F       {
; 0001 0080          LED_RED = STATUS_ON;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0001 0081          LED_GREEN = STATUS_OFF;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0001 0082          break;
;PCODE: $00000104 VOL: 0
; 0001 0083       }
; 0001 0084       case led_check:
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0001 0085       {
; 0001 0086          LED_RED = STATUS_ON;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0001 0087          LED_GREEN = STATUS_ON;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0001 0088          break;
;PCODE: $0000010C VOL: 0
; 0001 0089       }
; 0001 008A       default:
;PCODE: $0000010D VOL: 0
; 0001 008B          break;
;PCODE: $0000010E VOL: 0
; 0001 008C    }
;PCODE: $0000010F VOL: 0
; 0001 008D    if(g_alert_led_mode != no_fault && g_led_control % DELAY_SEND_ERR_DIV_NUM == 0)
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0001 008E    {
; 0001 008F       memset(g_uart_send_buf,0,sizeof(g_uart_send_buf));
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0001 0090       sprintf(g_uart_send_buf, "err,%d;", g_alert_led_mode);
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0001 0091       send_string(g_uart_send_buf);
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0001 0092       CONTROL_5V_12V = RUN_5V;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0001 0093       prev_status = g_alert_led_mode;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0001 0094    }
; 0001 0095    else if(g_alert_led_mode == no_fault && prev_status != no_fault)
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0001 0096    {
; 0001 0097       memset(g_uart_send_buf,0,sizeof(g_uart_send_buf));
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0001 0098       sprintf(g_uart_send_buf, "err,%d;", g_alert_led_mode);
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0001 0099       send_string(g_uart_send_buf);
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0001 009A       prev_status = g_alert_led_mode;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0001 009B    }
; 0001 009C    ALARM = LED_RED;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0001 009D }
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;
;void run_connect_mode()
; 0001 00A0 {
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0001 00A1    g_count_adc_0++;
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0001 00A2    if(g_count_adc_0 >= TIMEOUT_ON_MODE && g_connect_mode == ON_MODE)
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0001 00A3    {
; 0001 00A4       // Read adc and sent via uart
; 0001 00A5       g_count_adc_0 = 0;
;PCODE: $00000173 VOL: 0
; 0001 00A6       g_value_adc_0 = read_adc(0);
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0001 00A7       memset(g_uart_send_buf,0,sizeof(g_uart_send_buf));
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0001 00A8       sprintf(g_uart_send_buf, "adc,%d;", g_value_adc_0);
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0001 00A9       send_string(g_uart_send_buf);
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0001 00AA    }else if(g_count_adc_0 >= TIMEOUT_STARTING_MODE && g_connect_mode == STARTING_MODE){
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0001 00AB       // Sau khi nhan duoc lenh CONNECT, chay TIMEOUT_STARTING_MODE lan timer, sau do thay doi ve trang thai on mode
; 0001 00AC       QUAT = ON_5V;
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0001 00AD       CONTROL_5V_12V = RUN_5V;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0001 00AE       SENSOR_1 = STATUS_ON;
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0001 00AF       g_count_adc_0 = 0;
;PCODE: $0000019E VOL: 0
; 0001 00B0       g_connect_mode = ON_MODE;
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0001 00B1    }else if(g_count_adc_0 >= TIMEOUT_STARTING_MODE){
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0001 00B2       g_count_adc_0 = 0;
;PCODE: $000001A6 VOL: 0
; 0001 00B3    }
; 0001 00B4 }
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;
;void recieve_string(char* buf)
; 0001 00B7 {
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0001 00B8    int i = 0;
; 0001 00B9    char u = getchar();
; 0001 00BA    while(1){
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;	*buf -> Y+4
;	i -> R16,R17
;	u -> R19
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0001 00BB       if(u != ';' && i < MAX_RECIEVE_BUF){
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0001 00BC          buf[i] = u;
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0001 00BD          i++;
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0001 00BE          u = getchar();
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0001 00BF       }else{
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0001 00C0          break;
;PCODE: $000001C9 VOL: 0
; 0001 00C1       }
;PCODE: $000001CA VOL: 0
; 0001 00C2    }
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0001 00C3    i++;
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0001 00C4    buf[i] = '\0';
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0001 00C5 }
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;
;void connect_avr()
; 0001 00C8 {
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0001 00C9    // Bat ADC
; 0001 00CA    // ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
; 0001 00CB    g_count_adc_0 = 0;
;PCODE: $000001DA VOL: 0
; 0001 00CC    QUAT = OFF_5V;
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0001 00CD    CONTROL_5V_12V = RUN_12V;
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0001 00CE    g_connect_mode = STARTING_MODE;
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0001 00CF }
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;
;void turnoff()
; 0001 00D2 {
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0001 00D3    // Tat adc
; 0001 00D4    // ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
; 0001 00D5    g_count_adc_0 = 0;
;PCODE: $000001E5 VOL: 0
; 0001 00D6    CONTROL_5V_12V = RUN_5V;
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0001 00D7    QUAT = STATUS_OFF;
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0001 00D8    SENSOR_1 = STATUS_OFF;
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0001 00D9    g_connect_mode = OFF_MODE;
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0001 00DA }
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;
;
;int strcasecmp(const char *s1, const char *s2) {
; 0001 00DD int strcasecmp(const char *s1, const char *s2) {
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0001 00DE     const unsigned char *us1 = (const unsigned char *)s1,
; 0001 00DF                         *us2 = (const unsigned char *)s2;
; 0001 00E0 
; 0001 00E1     while (tolower(*us1) == tolower(*us2++))
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;	*s1 -> Y+6
;	*s2 -> Y+4
;	*us1 -> R16,R17
;	*us2 -> R18,R19
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0001 00E2         if (*us1++ == '\0')
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0001 00E3             return (0);
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0001 00E4     return (tolower(*us1) - tolower(*--us2));
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0001 00E5 }
;PCODE: $00000223 VOL: 0
;
;void execute_command(char* buf)
; 0001 00E8 {
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0001 00E9    char* temp_cmd;
; 0001 00EA    temp_cmd = strtok(buf, ",");
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;	*buf -> Y+2
;	*temp_cmd -> R16,R17
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0001 00EB    if(!strcasecmp(temp_cmd,"CONNECT"))
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0001 00EC    {
; 0001 00ED       // Bat quat to trong 1 phut, sau do bat sensor
; 0001 00EE       connect_avr();
;PCODE: $00000235 VOL: 0
; 0001 00EF    }
; 0001 00F0    else if(!strcasecmp(temp_cmd,"OFF"))
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0001 00F1    {
; 0001 00F2       // Tat quat nho, dung lay du lieu
; 0001 00F3       turnoff();
;PCODE: $0000023E VOL: 0
; 0001 00F4    }
; 0001 00F5    else if(!strcasecmp(temp_cmd,"threshold"))
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0001 00F6    {
; 0001 00F7       g_led_control = 1;
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0001 00F8       temp_cmd = strtok(NULL, ",");
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0001 00F9       if(temp_cmd != NULL)
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0001 00FA       {
; 0001 00FB          g_temperature_not_ready_value = atoi(temp_cmd);
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0001 00FC          memset(g_uart_send_buf,0,sizeof(g_uart_send_buf));
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0001 00FD          //sprintf(g_uart_send_buf, "thres,%d;", g_temperature_not_ready_value);
; 0001 00FE          send_string(g_uart_send_buf);
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0001 00FF       }
; 0001 0100    }
;PCODE: $0000025D VOL: 0
; 0001 0101 }
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0

	.DSEG
_0x20072:
	.BYTE 0x16
